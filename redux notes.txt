REDUX

it is a "predictable state container for javascript application"

to form a working usable app, there are two parts, the datat contained in the application AND the views contained in the application

redux is the data and react is the view
redux describes itself as a state container, it means it is a collection of all the data that describes the application. it contains all the hard data and meta data, such as books and curently selected books.

state with redux = application state, it contains all the data of our app

a reducer is a function that returns a piece of the application state. because our application have many pieces of state, we can have many different reducers.

an application state is basically a plain javascript object. reducers produce the value of our state. the keys can be any value we want but the only  thing we care about is the value of the state.

react and redux are two different libraries. it is only through a third library called react redux, that we can meld the two together and get a component that is actually aware of the state that is contained in redux.

a container is a react component that has a direct connection to the state managed by redux

we only create containers out of components that care about a particular piece of state. For example, the app does not care about the books but the book list does.

whenever application state changes, the object

-------------------------------------------------------------------

REVIEW SO FAR:
redux serves to construct the application state while react provides the views to display that state.
\
The two libraries are disconnected and only through the use of react-redux that we get a clear connection between the two.

The application state is generated by reducer functions. We created a books_reducer that returns an array of books. The array contains a list of object which each object contains the title of the book. we then combined the booksreducer with the index.js the reducer is going to add a key call books, and the value is whatever returned by the booksReducer.

book list from component to container because we need it to be aware of its own state. imported connect function from react-redux and then defined mapStateToProps, and hooked the mapStateToProps with the connect function. only the book list needs to know the list of books but the entire app does not need to know it.

We need to the app to render the list of books.

Redux generated a state object, which contains our books which maps that state to the props of our component. state is updated through the reducer, the component re-rendered with that lsit of books.

container = normal react component that is bonded with the application state. if the state changes, the component will re-render as well.

-------------------------------------------------------------------

actions and actions creator
lifecycle of an action in a redux application

action creater is a function that returns an object, that object is then sent to the different reducers all around the application. reducers can choose to return a different piece of state depending on the type of action. the newly state then gets piped into the app state which gets piped into react

user click book 2 -> calls action creator -> this function returns an object -> also has a type that described the type of action, lets say book selected, with the object selected -> the object is an action -> this action is sent to all reducers in the app

all reducers has a switch statement, which goes to a different line depending on the type of action. reducers can also do nothing if it does not care about the action. if it does care, it returns the new value of the state. all the diff containers gets pumped by mapStateToProps with the new state which will also re-render with the new state.

reducers and actions review
- redux is in charge of managing our application state -> it is a plain javascript object
- our app state is completely diff from component state
- component state can do this.state.XXXX and also this.setState(XXXX: 'sdsds')
- component state is separated from application state, not tied whatsoever.
- reducer forms our application state. they all get tied together by the index file in our reducers folder. for each key in our combineReducers object, we assign one reducer. that reducer is responsible for creating a specific piece of state (for ex, BooksReducer is responsible for creating books and ActiveBook is responsible for creating activeBook state).
- reducers are in charge our changing our app state over time using actions. whenever actions are dispatched, it flows through all reducers in the app. each reducers have an option that can return a diff piece of state dependent on the action (for ex, it can return a payload or nothing)
- action creator - simple function that return an action, which is a plain javascipt object. it always must have a type defined, and sometimes a payload (piece of data by convention).

(important to understand) ***diagram flow and cycle:
tied action creator to book list items. whenver user clicks on a book, it calls an action creater, which dispatched our action. this action is sent to all reducers. whichever reducers cares about this action, it returns a piece of state which is assembled as the global aplication state. this global application state is then injected back into all the diff containers inside our app. the containers then re-render then cause the views to update.